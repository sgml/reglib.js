#summary Using reglib's event delegation methods

=Event delegation methods=

  * reg.click(selectorString, clickHandler)
  * reg.hover(selectorString, mouseOverHandler[, mouseOutHandler])
  * reg.focus(selectorString, focusHandler[, blurHandler])
  * reg.key(selectorString, keyDownHandler, keyPressHandler, keyUpHandler)

Each method takes a selector and one or more handler functions. There are two things to remember about the handler functions, other than which event they handle:

  # They take an event object as their only parameter.
  # The `this` object refers to the element matching the selector, even if the event target was an ancestor of that element.

Here are some code examples showing what kinds of things you can do with the `reglib` event delegation methods.

==reg.click()==

{{{
// in the JavaScript
reg.click('p.foo a', function(e){
    alert(this.nodeName);
    alert(reg.getTarget(e).nodeName);
});
}}}

{{{
<!-- in the html -->
<p class="foo">
    <!-- clicking this link will alert "A" and then alert "EM" -->
    <a href="foo.html"><em>clickme</em></a>
</p>
}}}

==reg.hover()==

{{{
// in the JavaScript
reg.hover('p.foo a', function(e){
    reg.addClassName(document.body, 'foo'); // mouseover
}, function(e){
    reg.removeClassName(document.body, 'foo'); // mouseout
});
}}}

{{{
/* in the css */
body.foo { background: yellow; }
}}}

{{{
<!-- in the html -->
<p class="foo">
    <!-- hovering this makes the background yellow -->
    <a href="foo.html">hoverme</a>
</p>
}}}

==reg.focus()==

{{{
// in the JavaScript
// we just want to validate the date format onblur,
// no need to handle the focus event, so it can be null
reg.focus('input.date', null, function(e){
    if (!this.value.match(/\d\d\/\d\d\/\d\d\d\d/)) {
        alert('invalid date');
        reg.addClassName(this, 'error');
    } else {
        reg.removeClassName(this, 'error');
    }
});
}}}