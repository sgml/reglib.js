#summary Getting started using reglib

=Installation=

See the ReglibInstallation page for installation instructions.

=Renaming the `reg` object=

Within `reg.js` you can edit this line:

{{{
window.reg = (function(){
}}}

For example maybe you'd rather name it `$$$`:

{{{
window.$$$ = (function(){
}}}

Or perhaps:

{{{
window.SWEET_ACTION_JACKSON = (function(){
}}}

=Playing well with other scripts=

`reglib` adds a single variable `reg` to the global namespace. All `reglib` functions and methods are properties of this object:

{{{
<script type="text/javascript" src="path/to/reg.js"></script>
<script type="text/javascript">
reg.addClassName(document.body, 'foo');
reg.removeClassName(document.body, 'foo');
</script>
}}}

This keeps variable name collisions with other scripts to a minimum. If you feel confident that other scripts won't conflict with reg's function names, you can import reg's functions to the global namespace:

{{{
<script type="text/javascript" src="path/to/reg.js"></script>
<script type="text/javascript">
reg.importAll();
addClassName(document.body, 'foo');
removeClassName(document.body, 'foo');
</script>
}}}

If there's a collision `reg.importAll()` will throw an exception listing each collision.

=Save typing by using aliases=

If you want to save even more typing, you can use reg's shorthand aliases:

{{{
<script type="text/javascript" src="path/to/reg.js"></script>
<script type="text/javascript">
reg.importAll();
acn(document.body, 'foo'); // acn is short for addClassName
rcn(document.body, 'foo'); // rcn is short for removeClassName
</script>
}}}