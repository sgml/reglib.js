#summary Installing and using reglib

=Installing and Using=

Like most libraries, installation is just a matter of putting `reg.js` on your webserver and linking to it from your HTML page:

{{{
<script type="text/javascript" src="path/to/reg.js"></script>
<script type="text/javascript">

// now the reg object is available

reg.click('a@href', function(ev){
    alert('hello whirled');
});

</script>
}}}

=Renaming the `reg` Object=

Within `reg.js` you can edit this line:

{{{
window.reg = (function(){
}}}

For example maybe you'd rather name it `$$$`:

{{{
window.$$$ = (function(){
}}}

This is perfectly acceptable. Then your page might look like this:
{{{
<script type="text/javascript" src="path/to/reg.js"></script>
<script type="text/javascript">
$$$.click('a@href', function(ev){...});
</script>
}}}

=Global Variable Name Collisions=

`reglib` adds a single variable `reg` to the global namespace. All `reglib` functions and methods are properties of this object:

{{{
<script type="text/javascript" src="path/to/reg.js"></script>
<script type="text/javascript">
reg.addClassName(document.body, 'foo');
reg.removeClassName(document.body, 'foo');
</script>
}}}

This keeps variable name collisions with other scripts to a minimum. If you feel confident that other scripts won't conflict with reg's function names, you can import reg's functions to the global namespace:

{{{
<script type="text/javascript" src="path/to/reg.js"></script>
<script type="text/javascript">
reg.importAll();
addClassName(document.body, 'foo');
removeClassName(document.body, 'foo');
</script>
}}}

=Function Shorthand Aliases=

If you want to save even more typing, you can use reg's shorthand aliases:

{{{
<script type="text/javascript" src="path/to/reg.js"></script>
<script type="text/javascript">
reg.importAll();
acn(document.body, 'foo'); // acn is short for addClassName
rcn(document.body, 'foo'); // rcn is short for removeClassName
</script>
}}}