#summary reglib's onload and traversal tools.

= Introduction =

Despite its evils, the onload-traverse-modify model of JavaScript development is often unavoidable. For example, since form submit events don't bubble, reglib lacks a `reg.submit()` delegation method. Form elements must be hunted down and wrestled to the ground. reglib offers tools to make this as painless as possible.

=onload-traverse-modify methods=

==reg.setup(selectorString, setupFunction)==

Calling this method appends to a to-do list of actions to perform against DOM nodes. When the document ready event fires, `reg` looks at the to-do list. If it contains anything, it crawls the DOM looking for nodes that match `selectorString`. If it finds any, it runs `setupFunction` against them. Within `setupFunction`, the `this` object refers to the matched node. Here's an example, and roughly equivalent code in JQuery:

{{{
// reglib
reg.setup('form.foo',function(e){
    addEvent(this, 'submit', function(e){
        // validate the form
        if (!isValid) {
            alert("foo form is not valid");
            cancelDefault(e);
        }
    });
});
}}}

{{{
/// JQuery
$(document).ready(function(){
    $('form.foo').submit(function(e){
        // validate the form
        if (!isValid) {
            alert("foo form is not valid");
            e.preventDefault();
        }
    });
});
}}}

==reg.rerun(el)==



==reg.preSetup(setupFunction)==
==reg.postSetup(setupFunction)==