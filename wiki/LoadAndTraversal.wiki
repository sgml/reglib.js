#summary reglib's onload and traversal tools.

= Introduction =

Despite its evils, the onload-traverse-modify model of JavaScript development is often unavoidable. For example, since form submit events don't bubble, reglib lacks a `reg.submit()` delegation method. Form elements must be hunted down and wrestled to the ground. reglib offers tools to make this as (relatively) painless as possible.

=onload-traverse-modify methods=

==reg.setup(selectorString, setupFunction)==

Calling this method appends to a to-do list of actions to perform against DOM nodes. When the document ready event fires, `reg` looks at the to-do list. If it contains anything, it crawls the DOM looking for nodes that match `selectorString`. If it finds any, it calls `setupFunction` against them. Within `setupFunction`, the `this` object refers to the matched node. Here's an example, and roughly equivalent code in JQuery:

{{{
// reglib
reg.setup('form.foo',function(){
    addEvent(this, 'submit', function(e){
        // validate the form
        if (!isValid) {
            alert("foo form is not valid");
            cancelDefault(e);
        }
    });
});
}}}

{{{
/// JQuery
$(document).ready(function(){
    $('form.foo').submit(function(e){
        // validate the form
        if (!isValid) {
            alert("foo form is not valid");
            e.preventDefault();
        }
    });
});
}}}

Additions to the DOM by `setupFunction` will not be included in the DOM scan. For example:

{{{
reg.setup('p',function(){
    document.body.appendChild(reg.newElement('p',null,'this is a paragraph'));
    this.style.backgroundColor = 'red';
});
}}}

Will result in a bunch of non-red paragraphs appearing at the end of the page.

==reg.rerun(el)==

If `el` was added after the document ready event fired, you can use this method to re-execute the to-do list against `el` (and its descendants) to make sure it too gets the behavior it needs.

{{{
var johnnyComeLately = elem('div');
johnnyComeLately.innerHTML = threeHundredKilobytesOfHtml;
document.body.appendChild(johnnyComeLately);
reg.rerun(johnnyComeLately);
}}}

==reg.preSetup(function) and reg.postSetup(function)==

These both also create to-do lists of actions to perform when the document ready event fires. Unlike `reg.setup()` however, they don't run against specific nodes, They just blindly run onload. This makes for a total of three to-do lists that need to be performed onload. The first to get executed is the one for `reg.preSetup()`, the second for `reg.setup()` and the third for `reg.postSetup()`. This ordering comes in handy.

Also, sometimes it is better to use these than to use `reg.setup()`:

{{{
// this works, but it's wasteful because
// it initiates a DOM crawl. this is O(N) where
// N is the number of elements in the document
reg.setup('#foo', function(){
    // do something with this
});
}}}

{{{
// this does the same thing, but
// is O(1) rather than O(N)
reg.postSetup(function(){
    var el = document.getElementById('foo');
    if (!el) { return; }
    // do something with el
});
}}}